<launch>

  <machine name="omnimaxbot" address="omnimaxbot" env-loader="~/catkin_ws/src/omnimaxbot/omnimaxbot_control/ros_env.sh" user="marslab"/>

  <!-- Launch the robot's transforms -->
  <node machine="omnimaxbot" pkg="omnimaxbot_description" type="tf_broadcaster" name="tf_broadcaster" respawn="true"/>

  <!-- Launch the robot's kinematics and motor drivers -->
  <include file="$(find ax2550)/launch/ax2550.launch">
    <arg name="use_odom" value="false"/>
  </include>
  
  <!-- Launch joystick control -->
  <include file="$(find omnimaxbot_teleop)/launch/teleop.launch"/>
  
  <!-- Connect to IMU through Arduino -->
  <node machine="omnimaxbot" pkg="rosserial_python" type="serial_node.py" name="ros_arduino_imu" output="screen" respawn="true">
    <param name="~port" value="/dev/ttyACM0"/>
    <param name="~baud" value="115200"/>
  </node> 

  <!-- Get raw IMU data -->
  <node machine="omnimaxbot" pkg="ros_arduino_imu" type="raw_imu_bridge_node" name="raw_imu_bridge" output="screen" respawn="false"/>

  <!-- Filter IMU data -->
  <node machine="omnimaxbot" pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_madgwick" output="screen" respawn="false">
    <param name="publish_tf" value="false"/>
  </node>
  
  <!-- Launch the front laser sensor -->
  <node machine="omnimaxbot" pkg="lms1xx" type="LMS1xx_node_front" name="front_laser" respawn="true">
    <param name="host" value="192.168.1.2"/>
    <param name="frame_id" value="front_laser"/>
    <remap from="scan" to="front_scan"/>
  </node>

  <!-- copy front_scan to scan -->
  <node machine="omnimaxbot" pkg="topic_tools" type="relay" name="relay" args="/front_scan /scan"/>
  
  <!-- Launch the rear laser sensor -->
  <!-- <node machine="omnimaxbot" pkg="lms1xx" type="LMS1xx_node_rear" name="rear_laser" respawn="true"> -->
  <!--   <param name="host" value="192.168.1.3"/> -->
  <!--   <param name="frame_id" value="rear_laser"/> -->
  <!-- </node> -->
  
  <!-- Launch laser scan matcher to simulate the odom frame -->
  <node machine="omnimaxbot" pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher_node">
    <rosparam file="$(find omnimaxbot_2d_nav)/config/laser_scan_matcher_config.yaml" command="load"/>
    <remap from="scan" to="front_scan"/>
  </node>
  
  <!-- Simulate odometry msg from scan matcher -->
  <node machine="omnimaxbot" pkg="omnimaxbot_control" type="laser_scan_odom_node" name="laser_scan_odom_node"/>
  
  <!-- Launch kinect directly from omnimaxbot -->
  <!-- roslaunch omnimaxbot_control kinect.launch -->
  
  <!-- Convert the depth image to a laser scan -->
  <node machine="omnimaxbot" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">
    <param name="scan_height" value="400"/>
    <remap from="image" to="/camera/depth/image_rect"/>
    <remap from="scan" to="kinect_scan"/>
  </node> 
  
  <!-- Launch Bumblebee2 -->
  <node machine="omnimaxbot" pkg="camera1394stereo" type="camera1394stereo_node" name="camera1394stereo_node" output="screen">
    <param name="video_mode" value="format7_mode3" />
    <param name="format7_color_coding" value="raw16" />
    <param name="bayer_pattern" value="grbg" />
    <param name="bayer_method" value="" />
    <param name="stereo_method" value="Interlaced" />
  </node>
	
  <!-- Launch camera processing -->
  <node machine="omnimaxbot" pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc" ns="stereo_camera"/>

  <!-- Launch ar_sys -->
  <node machine="omnimaxbot" pkg="ar_sys" type="single_board" name="ar_single_board" output="screen">
    <remap from="/camera_info" to="/stereo_camera/right/camera_info" />
    <remap from="/image" to="/stereo_camera/right/image_rect_color" />
    <remap from="/transform" to="/tf" />
    <param name="image_is_rectified" type="bool" value="true"/>
    <param name="marker_size" type="double" value="0.1235"/>
    <param name="board_config" type="string" value="$(find ar_sys)/data/single/board.yml"/>
    <param name="board_frame" type="string" value="/board1" />
    <param name="draw_markers" type="bool" value="true" />
    <param name="draw_markers_cube" type="bool" value="true" />
    <param name="draw_markers_axis" type="bool" value="false" />
  </node>

  <!-- launch image_view -->
  <!-- <node pkg="image_view" type="image_view" name="image_view" output="screen"> -->
  <!--   <remap from="image" to="/ar_single_board/result" />  -->
  <!--   <param name="autosize" type="bool" value="false" />  -->
  <!-- </node> -->

  <!-- Load the map -->	
  <node machine="omnimaxbot" pkg="map_server" type="map_server" name="map_server" args="/home/marslab/catkin_ws/src/omnimaxbot/omnimaxbot_2d_nav/maps/UA1460_hector_512.yaml"/>
  
  <!-- Launch AMCL -->
  <include file="$(find omnimaxbot_2d_nav)/launch/amcl.launch"/>
  
  <!-- Launch move base -->
  <node machine="omnimaxbot" pkg="move_base" type="move_base" respawn="true" name="move_base" output="screen">
    <rosparam file="$(find omnimaxbot_2d_nav)/config/move_base_params/costmap_common_params.yaml" command="load" ns="global_costmap"/>
    <rosparam file="$(find omnimaxbot_2d_nav)/config/move_base_params/costmap_common_params.yaml" command="load" ns="local_costmap"/>
    <rosparam file="$(find omnimaxbot_2d_nav)/config/move_base_params/local_costmap_params.yaml" command="load"/>
    <rosparam file="$(find omnimaxbot_2d_nav)/config/move_base_params/global_costmap_params.yaml" command="load"/>
    <rosparam file="$(find omnimaxbot_2d_nav)/config/move_base_params/base_local_planner_params.yaml" command="load"/>
    <!-- <rosparam file="$(find omnimaxbot_2d_nav)/config/move_base_params/dwa_local_planner_params.yaml" command="load"/> -->
    <rosparam file="$(find omnimaxbot_2d_nav)/config/move_base_params/global_planner_params.yaml" command="load"/>
    <remap from="/cmd_vel" to="/omni_cmd_vel"/>
    <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS"/> -->
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
  </node>

  <!-- Launch rviz -->
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find omnimaxbot_2d_nav)/rviz/test.rviz" respawn="false" output="screen"/>
  
  <!-- Launch the front fork driver -->
  <node machine="omnimaxbot" pkg="phidgets" type="motor_control_hc_1065" name="front_fork_driver" respawn="true">
    <param name="serial" value="299103"/>
  </node>
  
  <!-- Launch the rear fork driver -->
  <node machine="omnimaxbot" pkg="phidgets" type="motor_control_hc_1065" name="rear_fork_driver" respawn="true">
    <param name="serial" value="299104"/>
  </node>

  <node pkg="omnimaxbot_control" type="omnimaxbot_move_test" name="move_test" output="screen"/>
	
</launch>
